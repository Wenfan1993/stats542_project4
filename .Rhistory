return(para)
}
library(mclust)
dim(faithful)
n <- nrow(faithful)
K <- 2
set.seed(234)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
result = myEM(data=faithful, itmax=1, G=K, para=para0)
result
data = faithful
prob = Estep(data, 2, para0)
G=2
para = para0
matrix_mean <- matrix(0, G, G)
matrix_std <- matrix(0, G, G)
matrix_prob <- matrix(0, 1, G)
i=1
mu1 = colSums (data * prob[,i])/sum(prob[,i])
matrix_mean[,i] = mu1
matrix_mean_stdcal = matrix(0,nrow(data),dim(data)[2])
for (j in 1:G) matrix_mean_stdcal[,j] = rep(mu1[j],times=nrow(data))
View(matrix_mean_stdcal)
diff = (data - matrix_mean_stdcal)
View(diff)
View(diff)
diff = (data - matrix_mean_stdcal)^2
View(diff)
View(diff)
diff = (data - matrix_mean_stdcal)
View(diff)
diff = (data - matrix_mean_stdcal)^2
diff = colSums(((data - matrix_mean_stdcal)^2)* prob[,i])
diff = colSums(((data - matrix_mean_stdcal)^2)* prob[,i])/sum(prob[,i])
diff
options(digits=8)
options()$digits
Estep <- function(data, G, para){
# Your Code
# Return the n-by-G probability matrix
n <- nrow(data)
matrix_prob =  matrix(0, n, G)
cov_matrix = solve(cov(data))
for (i in 1:n) {
prob_ins = matrix(0, 1, G)
ins = data[i,]
x1_mal = as.matrix(ins - para$mean[,1]) %*% cov_matrix %*% t(as.matrix(ins - para$mean[,1]))
for (j in 1:G){
x2_mal = as.matrix(ins - para$mean[,j]) %*% cov_matrix %*% t(as.matrix(ins - para$mean[,j]))
b2 <- log(para$prob[2]/para$prob[1]) + 0.5 * (x1_mal - x2_mal)
b2_exp = exp(b2)
prob_ins[1,j] = b2_exp
}
for (j in 1:G) matrix_prob[i,j] = prob_ins[1,j]/sum(prob_ins)
}
return(matrix_prob)
}
Mstep <- function(data, G, para, post.prob){
prob = post.prob
matrix_mean <- matrix(0, G, G)
matrix_std <- matrix(0, G, G)
matrix_prob <- matrix(0, 1, G)
for (i in 1:G){
mu1 = colSums (data * prob[,i])/sum(prob[,i])
matrix_mean[,i] = mu1
matrix_mean_stdcal = matrix(0,nrow(data),dim(data)[2])
for (j in 1:G) matrix_mean_stdcal[,j] = rep(mu1[j],times=nrow(data))
sig1 = colSums(((data - matrix_mean_stdcal)^2)* prob[,i])/sum(prob[,i])
matrix_std[,i] = sig1
prob1 = sum(prob[,i])/sum(prob)
matrix_prob[i] = prob1
}
para$prob = matrix_prob
para$mean =  matrix_mean
para$Sigma =matrix_std
return(para)
# Your Code
# Return the updated parameters
}
myEM <- function(data, itmax, G, para){
# itmax: num of iterations
# G:     num of components
# para:  list of parameters (prob, mean, Sigma)
for(t in 1:itmax){
post.prob <- Estep(data, G, para)
para <- Mstep(data, G, para, post.prob)
}
return(para)
}
library(mclust)
dim(faithful)
n <- nrow(faithful)
K <- 2
set.seed(234)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
result = myEM(data=faithful, itmax=1, G=K, para=para0)
result
data = faithful
prob = Estep(data, 2, para0)
G=2
para = para0
matrix_mean <- matrix(0, G, G)
matrix_std <- matrix(0, G, G)
matrix_prob <- matrix(0, 1, G)
for (i in 1:G){
mu1 = colSums (data * prob[,i])/sum(prob[,i])
matrix_mean[,i] = mu1
matrix_mean_stdcal = matrix(0,nrow(data),dim(data)[2])
for (j in 1:G) matrix_mean_stdcal[,j] = rep(mu1[j],times=nrow(data))
diff = colSums(((data - matrix_mean_stdcal)^2)* prob[,i])/sum(prob[,i])
sig1 = colSums((data - matrix_mean_stdcal)^2)/sum(prob[,i])
matrix_std[,i] = sig1
prob1 = sum(prob[,i])/sum(prob)
matrix_prob[i] = prob1
}
matrix_std
t(data) %*% prob %*% diag(1/colSums(post_prob))
t(data) %*% prob %*% diag(1/colSums(prob))
options(digits=8)
options()$digits
Estep <- function(data, G, para){
# Your Code
# Return the n-by-G probability matrix
n <- nrow(data)
matrix_prob =  matrix(0, n, G)
cov_matrix = solve(cov(data))
for (i in 1:n) {
prob_ins = matrix(0, 1, G)
ins = data[i,]
x1_mal = as.matrix(ins - para$mean[,1]) %*% cov_matrix %*% t(as.matrix(ins - para$mean[,1]))
for (j in 1:G){
x2_mal = as.matrix(ins - para$mean[,j]) %*% cov_matrix %*% t(as.matrix(ins - para$mean[,j]))
b2 <- log(para$prob[2]/para$prob[1]) + 0.5 * (x1_mal - x2_mal)
b2_exp = exp(b2)
prob_ins[1,j] = b2_exp
}
for (j in 1:G) matrix_prob[i,j] = prob_ins[1,j]/sum(prob_ins)
}
return(matrix_prob)
}
Mstep <- function(data, G, para, post.prob){
prob = post.prob
matrix_mean <- t(data) %*% prob %*% diag(1/colSums(prob))#matrix(0, G, G)
matrix_std <- matrix(0, G, G)
matrix_prob <- matrix(0, 1, G)
for (i in 1:G){
mu1 = colSums (data * prob[,i])/sum(prob[,i])
#matrix_mean[,i] = mu1
matrix_mean_stdcal = matrix(0,nrow(data),dim(data)[2])
for (j in 1:G) matrix_mean_stdcal[,j] = rep(mu1[j],times=nrow(data))
sig1 = colSums(((data - matrix_mean_stdcal)^2)* prob[,i])/sum(prob[,i])
matrix_std[,i] = sig1
prob1 = sum(prob[,i])/sum(prob)
matrix_prob[i] = prob1
}
para$prob = matrix_prob
para$mean =  matrix_mean
para$Sigma =matrix_std
return(para)
# Your Code
# Return the updated parameters
}
myEM <- function(data, itmax, G, para){
# itmax: num of iterations
# G:     num of components
# para:  list of parameters (prob, mean, Sigma)
for(t in 1:itmax){
post.prob <- Estep(data, G, para)
para <- Mstep(data, G, para, post.prob)
}
return(para)
}
library(mclust)
dim(faithful)
n <- nrow(faithful)
K <- 2
set.seed(234)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
result = myEM(data=faithful, itmax=20, G=K, para=para0)
result
Rout <- em(modelName = "EEE", data = faithful,
control = emControl(eps=0, tol=0, itmax = 20),
parameters = ini0)$parameters
list(Rout$pro, Rout$mean, Rout$variance$Sigma)
options(digits=8)
options()$digits
library(mclust)
dim(faithful)
head(faithful)
n <- nrow(faithful)
K <- 2
set.seed(8302)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
para0
myEM(data=faithful, itmax=20, G=K, para=para0)
Rout <- em(modelName = "EEE", data = faithful,
control = emControl(eps=0, tol=0, itmax = 20),
parameters = ini0)$parameters
list(Rout$pro, Rout$mean, Rout$variance$Sigma)
K <- 3
set.seed(8302)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
para0
myEM(data=faithful, itmax=20, G=K, para=para0)
options(digits=8)
options()$digits
library(mclust)
dim(faithful)
head(faithful)
n <- nrow(faithful)
K <- 2
set.seed(8302)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
para0
myEM(data=faithful, itmax=20, G=K, para=para0)
Rout <- em(modelName = "EEE", data = faithful,
control = emControl(eps=0, tol=0, itmax = 20),
parameters = ini0)$parameters
list(Rout$pro, Rout$mean, Rout$variance$Sigma)
K <- 3
set.seed(8302)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:K, n, replace = TRUE)
Z <- matrix(0, n, K)
for(k in 1:K)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma)
para0
myEM(data=faithful, itmax=20, G=K, para=para0)
shiny::runApp('C:/Users/Wenxi/Desktop/Courses/Practical_Statistical_Learning/project4/project4')
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
shiny::runApp('C:/Users/Wenxi/Desktop/Courses/Practical_Statistical_Learning/project4/project4')
runApp('C:/Users/Wenxi/Desktop/Courses/Practical_Statistical_Learning/project4/project4')
runApp('C:/Users/Wenxi/Desktop/Courses/Practical_Statistical_Learning/project4/project4')
setwd("C:/Users/Wenxi/Desktop/Courses/Practical_Statistical_Learning/project4/project4")
library(recommenderlab)
library(recommenderlab)
library(Matrix)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
i = paste0('u', train$UserID)
i
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
head(Rmat)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
recom = predict(rec_UBCF,
Rmat[1:3], type = 'ratings')
as(recom, 'matrix')[, 1:10]
Rmat
print(user_ratings.shape)
Rmat.shape
dim(Rmat)
runApp()
df <- data.frame (MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df <- data.frame (MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df <- data.frame(MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df
Rmatp = sparseMatrix(1, as.integer(df$MovieID), x = df$Rating)
i
Rmatp = sparseMatrix("u10000000", as.integer(df$MovieID), x = df$Rating)
as.integer(tmp$i)
as.integer("u10000000")
tmp
train$UserID
max(train$UserID)
tmp
newj = j = paste0('m', df$MovieID)
newj
dim(newj)[2]
dim(newj)
length(newj)
newi = c('m6041') * length(newj)
newi = rep(c('m6041'),  length(newj))
newi
newx = df$Rating
tmpnew = data.frame(newi, newj, newx, stringsAsFactors = T)
tmp_com = rbind(tmp, tmpnew)
names(tmpnew) = names(tmp)
tmp_com = rbind(tmp, tmpnew)
Rmat_com = sparseMatrix(as.integer(tmp_com$i), as.integer(tmp_com$j), x = tmp_com$x)
rownames(Rmat_com) = levels(tmp_com$i)
colnames(Rmat_com) = levels(tmp_com$j)
tmp_com = new('realRatingMatrix', data = tmp_com)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
type(Rmat)
typeof(Rmat)
newi = rep(c('m6041'),  length(newj))
newj = paste0('m', df$MovieID)
newx = df$Rating
tmpnew = data.frame(newi, newj, newx, stringsAsFactors = T)
names(tmpnew) = names(tmp)
tmp_com = rbind(tmp, tmpnew)
Rmat_com = sparseMatrix(as.integer(tmp_com$i), as.integer(tmp_com$j), x = tmp_com$x)
rownames(Rmat_com) = levels(tmp_com$i)
colnames(Rmat_com) = levels(tmp_com$j)
typeof(Rmat_com)
tmp_com = new('realRatingMatrix', data = tmp_com)
Rmat_com
tmpnew
j
colnames(Rmat)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rownames(Rmat)
colnames(Rmat)
train
train_new = rbin(train, df)
df$UserID = 6041
train_new = rbin(train, df)
train_new = rbind(train, df)
train_new = rbind(train, df)
i = paste0('u', train_new$UserID)
j = paste0('m', train_new$MovieID)
x = train_new$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
Rmat[c('u6041')]
recom = predict(rec_UBCF,
Rmat[c('u6041'),]  , type = 'ratings')
recom
as(recom, 'matrix')[1:3, 1:10]
as(recom, 'matrix')
pred = as(recom, 'matrix')
View(pred)
pred[,pred>0]
dim(pred[,pred>0])
pred2 = pred[,pred>0]
pred2 = pred[!is.nan(pred)]
pred2 = pred[,!is.nan(pred)]
pred2
pred = as(recom, 'matrix')
pred2 = pred[is.nan(pred)] = 0
pred2
pred2
pred = as(recom, 'matrix')
pred
pred[is.nan(pred)] = 0
View(pred)
pred[is.nan(pred)] = 0
pred = as.data.frame(pred)
pred
View(pred)
pred[is.nan(pred)] = 0
pred
View(pred)
View(pred)
is.nan(pred)
pred = as(recom, 'matrix')
is.nan(pred)
fil = is.nan(pred)
View(fil)
View(fil)
pred = as(recom, 'matrix')
pred[1,1]
typeof(pred[1,1])
navalue = NA
typeof(navalue)
nav = pred[1,1]
typeof(nav)
string(nav)
pred2 = na_if(pred,nav)
library(dplyr)
pred2 = na_if(pred,nav)
View(pred2)
View(pred2)
nav2 = pred2[1,1]
typeof(nav2)
nav
fil = is.na(pred)
View(fil)
View(fil)
pred2 = pred[,!is.na(pred)]
names(pred2)
sort(pred2, descreasing=TRUE)
sort(pred2, decreasing =TRUE)
sort(pred2, decreasing =TRUE)[:10]
sort(pred2, decreasing =TRUE)[,1:10]
pred3 = sort(pred2, decreasing =TRUE)
names(pred3)[1:10]
help(replace)
recon_movie_id = names(pred3)[1:10]
user_predicted_id = replace(recon_movie_id,'m','')
user_predicted_id
recon_movie_id = names(pred3)[1:10]
user_predicted_id = c()
for (i in 1:10){
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(movie_id[2:length(movie_id)])
}
i=1
movie_id = recon_movie_id[i]
movie_id
movie_id[2:length(movie_id)]
user_predicted_id[i] = strtoi(replace(movie_id,'m',''))
user_predicted_id[i] = strtoi(replace(movie_id,1,''))
user_predicted_id
user_predicted_id = c()
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(replace(movie_id,1,''))
user_predicted_id
user_predicted_id[i] = replace(movie_id,1,'')
user_predicted_id
movie_id
substr(movie_id,2,5)
substr(movie_id,2,length(movie_id))
length(movie_id)
substr(movie_id,2,nchar(movie_id))
strtoi(substr(movie_id,2,nchar(movie_id)))
user_predicted_id = c()
for (i in 1:10){
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(substr(movie_id,2,nchar(movie_id)))
}
user_predicted_id
pred_sort[1:10]
pred_sort = sort(pred[,!is.na(pred)], decreasing =TRUE)
pred_sort[1:10]
recom_results <- data.table(Rank = 1:10,
MovieID = movies$MovieID[user_predicted_ids],
Title = movies$Title[user_predicted_ids],
Predicted_rating =  pred_sort[1:10])
runApp()
runApp()
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
