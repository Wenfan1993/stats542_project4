as(recom, 'matrix')[, 1:10]
Rmat
print(user_ratings.shape)
Rmat.shape
dim(Rmat)
runApp()
df <- data.frame (MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df <- data.frame (MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df <- data.frame(MovieID   = c(4,2,3,1),
Rating = c(3,2,2,3))
df
Rmatp = sparseMatrix(1, as.integer(df$MovieID), x = df$Rating)
i
Rmatp = sparseMatrix("u10000000", as.integer(df$MovieID), x = df$Rating)
as.integer(tmp$i)
as.integer("u10000000")
tmp
train$UserID
max(train$UserID)
tmp
newj = j = paste0('m', df$MovieID)
newj
dim(newj)[2]
dim(newj)
length(newj)
newi = c('m6041') * length(newj)
newi = rep(c('m6041'),  length(newj))
newi
newx = df$Rating
tmpnew = data.frame(newi, newj, newx, stringsAsFactors = T)
tmp_com = rbind(tmp, tmpnew)
names(tmpnew) = names(tmp)
tmp_com = rbind(tmp, tmpnew)
Rmat_com = sparseMatrix(as.integer(tmp_com$i), as.integer(tmp_com$j), x = tmp_com$x)
rownames(Rmat_com) = levels(tmp_com$i)
colnames(Rmat_com) = levels(tmp_com$j)
tmp_com = new('realRatingMatrix', data = tmp_com)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
type(Rmat)
typeof(Rmat)
newi = rep(c('m6041'),  length(newj))
newj = paste0('m', df$MovieID)
newx = df$Rating
tmpnew = data.frame(newi, newj, newx, stringsAsFactors = T)
names(tmpnew) = names(tmp)
tmp_com = rbind(tmp, tmpnew)
Rmat_com = sparseMatrix(as.integer(tmp_com$i), as.integer(tmp_com$j), x = tmp_com$x)
rownames(Rmat_com) = levels(tmp_com$i)
colnames(Rmat_com) = levels(tmp_com$j)
typeof(Rmat_com)
tmp_com = new('realRatingMatrix', data = tmp_com)
Rmat_com
tmpnew
j
colnames(Rmat)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rownames(Rmat)
colnames(Rmat)
train
train_new = rbin(train, df)
df$UserID = 6041
train_new = rbin(train, df)
train_new = rbind(train, df)
train_new = rbind(train, df)
i = paste0('u', train_new$UserID)
j = paste0('m', train_new$MovieID)
x = train_new$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
Rmat[c('u6041')]
recom = predict(rec_UBCF,
Rmat[c('u6041'),]  , type = 'ratings')
recom
as(recom, 'matrix')[1:3, 1:10]
as(recom, 'matrix')
pred = as(recom, 'matrix')
View(pred)
pred[,pred>0]
dim(pred[,pred>0])
pred2 = pred[,pred>0]
pred2 = pred[!is.nan(pred)]
pred2 = pred[,!is.nan(pred)]
pred2
pred = as(recom, 'matrix')
pred2 = pred[is.nan(pred)] = 0
pred2
pred2
pred = as(recom, 'matrix')
pred
pred[is.nan(pred)] = 0
View(pred)
pred[is.nan(pred)] = 0
pred = as.data.frame(pred)
pred
View(pred)
pred[is.nan(pred)] = 0
pred
View(pred)
View(pred)
is.nan(pred)
pred = as(recom, 'matrix')
is.nan(pred)
fil = is.nan(pred)
View(fil)
View(fil)
pred = as(recom, 'matrix')
pred[1,1]
typeof(pred[1,1])
navalue = NA
typeof(navalue)
nav = pred[1,1]
typeof(nav)
string(nav)
pred2 = na_if(pred,nav)
library(dplyr)
pred2 = na_if(pred,nav)
View(pred2)
View(pred2)
nav2 = pred2[1,1]
typeof(nav2)
nav
fil = is.na(pred)
View(fil)
View(fil)
pred2 = pred[,!is.na(pred)]
names(pred2)
sort(pred2, descreasing=TRUE)
sort(pred2, decreasing =TRUE)
sort(pred2, decreasing =TRUE)[:10]
sort(pred2, decreasing =TRUE)[,1:10]
pred3 = sort(pred2, decreasing =TRUE)
names(pred3)[1:10]
help(replace)
recon_movie_id = names(pred3)[1:10]
user_predicted_id = replace(recon_movie_id,'m','')
user_predicted_id
recon_movie_id = names(pred3)[1:10]
user_predicted_id = c()
for (i in 1:10){
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(movie_id[2:length(movie_id)])
}
i=1
movie_id = recon_movie_id[i]
movie_id
movie_id[2:length(movie_id)]
user_predicted_id[i] = strtoi(replace(movie_id,'m',''))
user_predicted_id[i] = strtoi(replace(movie_id,1,''))
user_predicted_id
user_predicted_id = c()
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(replace(movie_id,1,''))
user_predicted_id
user_predicted_id[i] = replace(movie_id,1,'')
user_predicted_id
movie_id
substr(movie_id,2,5)
substr(movie_id,2,length(movie_id))
length(movie_id)
substr(movie_id,2,nchar(movie_id))
strtoi(substr(movie_id,2,nchar(movie_id)))
user_predicted_id = c()
for (i in 1:10){
movie_id = recon_movie_id[i]
user_predicted_id[i] = strtoi(substr(movie_id,2,nchar(movie_id)))
}
user_predicted_id
pred_sort[1:10]
pred_sort = sort(pred[,!is.na(pred)], decreasing =TRUE)
pred_sort[1:10]
recom_results <- data.table(Rank = 1:10,
MovieID = movies$MovieID[user_predicted_ids],
Title = movies$Title[user_predicted_ids],
Predicted_rating =  pred_sort[1:10])
runApp()
runApp()
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
library(recommenderlab)
library(Matrix)
library(magrittr)
library(dplyr)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
overallRMSE_User = c()
for (i_iter in 1:1){
set.seed(i_iter * 100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')  # each element are ratings of that user
test.pred = test
test.pred$Rating = NA
test_rating_by_user = test %>% group_by(UserID)
test_rating_by_user_df = test_rating_by_user %>% summarise(
Rating = mean(Rating)
)
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating = rec_list[[paste0('u',userid)]][paste0('m',movieid)]
# handle missing values; 2.5 might not be the ideal choice
replace_na_value = test_rating_by_user_df[test_rating_by_user_df$UserID== userid,2]$Rating
replace_na_value = ifelse(length(replace_na_value)==0, 2.5, replace_na_value)
test.pred$Rating[u] = ifelse(is.na(rating), 2.5, rating)
}
# Calculate RMSE
RMSE = sqrt(mean((test$Rating - test.pred$Rating)^2))
overallRMSE_User[i_iter] = RMSE
}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(recommenderlab)
library(Matrix)
library(magrittr)
library(dplyr)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
overallRMSE_User = c()
for (i_iter in 1:10){
set.seed(i_iter * 100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')  # each element are ratings of that user
test.pred = test
test.pred$Rating = NA
test_rating_by_user = test %>% group_by(UserID)
test_rating_by_user_df = test_rating_by_user %>% summarise(
Rating = mean(Rating)
)
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating = rec_list[[paste0('u',userid)]][paste0('m',movieid)]
# handle missing values; 2.5 might not be the ideal choice
replace_na_value = test_rating_by_user_df[test_rating_by_user_df$UserID== userid,2]$Rating
replace_na_value = ifelse(length(replace_na_value)==0, 2.5, replace_na_value)
test.pred$Rating[u] = ifelse(is.na(rating), 2.5, rating)
}
# Calculate RMSE
RMSE = sqrt(mean((test$Rating - test.pred$Rating)^2))
overallRMSE_User[i_iter] = RMSE
}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(recommenderlab)
library(Matrix)
library(magrittr)
library(dplyr)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
overallRMSE_User = c()
for (i_iter in 1:10){
set.seed(i_iter * 100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')  # each element are ratings of that user
test.pred = test
test.pred$Rating = NA
test_rating_by_user = test %>% group_by(UserID)
test_rating_by_user_df = test_rating_by_user %>% summarise(
Rating = mean(Rating)
)
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating = rec_list[[paste0('u',userid)]][paste0('m',movieid)]
# handle missing values; 2.5 might not be the ideal choice
replace_na_value = test_rating_by_user_df[test_rating_by_user_df$UserID== userid,2]$Rating
replace_na_value = ifelse(length(replace_na_value)==0, 2.5, replace_na_value)
test.pred$Rating[u] = ifelse(is.na(rating), 2.5, rating)
}
# Calculate RMSE
RMSE = sqrt(mean((test$Rating - test.pred$Rating)^2))
overallRMSE_User[i_iter] = RMSE
}
print(overallRMSE_User)
overallRMSE_Item = c()
for (i_iter in 1:10){
set.seed(i_iter * 100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
#start from here
rec_IBCF = Recommender(Rmat, method = 'IBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
k = 25
))
#print('model generated')
#print(rec_IBCF@model)
recom = predict(rec_IBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')  # each element are ratings of that user
test.pred = test
test.pred$Rating = NA
#test_rating_by_user = test %>% group_by(UserID)
#test_rating_by_user_df = test_rating_by_user %>% summarise(
#  Rating = mean(Rating)
test_rating_by_movie = test %>% group_by(MovieID)
test_rating_by_movie_df = test_rating_by_movie %>% summarise(
Rating = mean(Rating)
)
default = 0
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating = rec_list[[paste0('u',userid)]][paste0('m',movieid)]
if (is.na(rating)){
default = default +1
}
# handle missing values; 2.5 might not be the ideal choice
replace_na_value = test_rating_by_movie_df[test_rating_by_movie_df$MovieID== movieid,2]$Rating
replace_na_value = ifelse(length(replace_na_value)==0, 2.5, replace_na_value)
test.pred$Rating[u] = ifelse(is.na(rating), 2.5, rating)
}
# Calculate RMSE
RMSE = sqrt(mean((test$Rating - test.pred$Rating)^2))
overallRMSE_Item[i_iter] = RMSE
}
print(overallRMSE_Item)
test.pred$Rating
sum(test.pred$Rating==2.5)
length(test.pred$Rating)
181095/200042
rating
default
180637/200042
library(e1071)
library(e1071)
spam = read.table(file="https://web.stanford.edu/~hastie/ElemStatLearn/datasets/spam.data")
names(spam)[58] = "Y"
spam$Y = as.factor(spam$Y)
testID = c(1:100, 1901:1960)
spam.test=spam[testID, ];
spam.train=spam[-testID, ];
## Linear SVM
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
result[0,1]+result[1,0]
result = table(spam.train$Y, svmfit$fitted)
result[0,1]+result[1,0]
result[0,1]
result
result[c(0,1)]
result[c(0,0)]
result[c(1,2)]
result[1,2]
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
result_test
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
summary(svmfit)
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
result_test
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
summary(svmfit)
result[1,2]+result[2,1]
result_test[1,2]+result_test[2,1]
result_test
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
(svmfit)
result[1,2]+result[2,1]
result_test[1,2]+result_test[2,1]
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
summary(svmfit)
result[1,2]+result[2,1]
result_test[1,2]+result_test[2,1]
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
summary(svmfit)
result[1,2]+result[2,1]
result_test[1,2]+result_test[2,1]
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
result = table(spam.train$Y, svmfit$fitted)
result[1,2]+result[2,1]
svmpred=predict(svmfit, newdata=spam.test)
result_test = table(spam.test$Y, svmpred)
result_test[1,2]+result_test[2,1]
summary(svmfit)
result[1,2]+result[2,1]
result_test[1,2]+result_test[2,1]
